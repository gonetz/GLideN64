/*********************************************************************************
* Meta Information                                                               *
*********************************************************************************/
#0001# "English"

/*********************************************************************************
* Config Dialog                                                                  *
*********************************************************************************/
#1000# "Video"
#1001# "Emulation"
#1002# "Frame buffer"
#1003# "Texture enhancement"
#1004# "OSD"
#1005# "Debug"
#1010# "Save settings for:"
#1011# "Settings profile:"
#1012# "Remove"
#1013# "Restore Defaults"
#1014# "Save and Close"
#1015# "Save"
#1016# "Close"

/*********************************************************************************
* Video Tab                                                                      *
*********************************************************************************/
#2000# "Video"
#2001# "Full screen resolution:"
#2002# "All the resolutions that your video card/monitor supports should be displayed.\n[Recommended: Maximum resolution for your monitor unless performance becomes an issue]"
#2003# "Refresh rate:"
#2005# "Windowed resolution:"
#2006# "This option selects the resolution for windowed mode. You can also type in a custom window size.\n[Recommended: 640 x 480, 800 x 600, 1024 x 768, 1280 x 960]"
#2007# "Aspect ratio:"
#2008# "This setting adjusts the aspect ratio of the video output. All N64 games support 4:3. Some games support 16:9 within game settings. Use Stretch to fill the screen without pillar or letterboxing.\nTry to adjust game to fit tries to adjust the viewing space to fit without stretching. Many games work well adjusted, but some don't."
#2009# "4:3 (recommended)"
#2010# "16:9"
#2011# "Stretch"
#2012# "Try to adjust game to fit"
#2013# "Enable VSync"
#2014# "Vertical sync, or VSync, can improve the image by syncing the game's frame rate to your monitor's refresh rate. This prevents image tearing, but may cause performance problems.\n[Recommended: Usually off, on if you have image tearing problems]"
#2015# "Enable threaded video"
#2016# "Threaded video can improve performance with poor OpenGL drivers at the cost of very marginal input lag, usually less than half a frame.\n[Recommended: Usually off, unless there are performance issues]"
#2017# "Overscan"
#2018# "When enabled, the image is cropped by values specified in N64 pixels. Useful to remove black borders in some games."
#2019# "NTSC"
#2020# "PAL"
#2021# "Anti-aliasing"
#2022# "No anti-aliasing"
#2023# "Fast approximate anti-aliasing (FXAA)"
#2024# "Multisample anti-aliasing (MSAA):"
#2025# "Off"
#2026# "High"
#2027# "GLideN64 offers two methods to smooth jagged polygons:\nFast approximate anti-aliasing (FXAA): FXAA is a post-processing filter that can provide a decent result, but as good as MSAA. The main reason to use FXAA is to use with N64-style depth compare. FXAA adds some blurriness to the output image, causing some textures like text to possibly look worse.\nMultisample anti-aliasing (MSAA): MSAA is a standard anti-aliasing technique used in computer graphics to improve image quality. Most modern GPUs support 2, 4, 8, and 16 samples. More samples mean better quality, but are slower. There are two downsides: it's incompatible with N64-style depth compare and may cause minor glitches in some games.\nRecommendation: [Usually 16x MSAA, or FXAA with N64-style depth compare]"
#2028# "Multisample anti-aliasing is not compatible with N64-style depth compare."
#2029# "Filtering"
#2030# "Anisotropic filtering:"
#2031# "Off"
#2032# "High"
#2033# "Bilinear filtering:"
#2034# "Standard"
#2035# "N64-style 3 point"
#2036# "Bilinear filtering: Textures will use standard PC-style bilinear filtering.\nN64-style 3 point: Textures will be filtered more like the N64. The result is less smooth but more accurate."
#2037# "Dithering"
#2038# "Pattern (RDRAM):"
#2039# "Apply to final output"
#2040# "This setting enables game controlled ordered grid dithering. Enable it for accurate representation. Default = disabled."
#2041# "Enable 5-bit quantization"
#2042# "Like real hardware this setting reduces the number of colors if dithering is used. Removes undesired dithering fragments. Default = enabled."
#2043# "High resolution noise"
#2044# "RDRAM dithering prevents color banding in games with framebuffer effects."
#2045# "Settings: Disabled, Bayer ordered grid dithering, Magic Square ordered grid dithering or blue noise dithering.Blue noise dithering produces unobtrusive results.Default = blue noise dithering."
#2046# "Disable"
#2047# "Bayer"
#2048# "Magic square"
#2049# "Blue noise"
#2050# "Language:"

/*********************************************************************************
* Emulation Tab                                                                  *
*********************************************************************************/
#3000# "Use per-game settings"
#3001# "When enabled, all non-default values of settings are stored individually for each game.\nWhen a game is running, settings are displayed and saved for the currently running game.\nNote: GLideN64 already contains settings for the optimal performance of most games. Be careful when altering options on 'Emulation' and 'Frame buffer' tab.\n[Recommended: Checked]"
#3002# "Enable N64-style mip-mapping"
#3003# "The N64 uses a unique method of mip-mapping that's difficult to reproduce correctly on PCs. When checked, this option emulates N64-accurate mip-mapping. When unchecked, some games have sharper distant textures.\n[Recommended: Checked]"
#3004# "Enable per-pixel lighting (better quality, HLE only)"
#3005# "In N64 games lighting is calculated per vertex. This option enables Phong shading, which provides smoother and more realistic lighting.\n\n[Recommended: Your preference]"
#3006# "Store compiled shaders for performance (recommended)"
#3007# "Use persistent storage for compiled shader programs.\nEach game uses a set of combiners. A combiner is an equation that defines how to build output color from various color inputs. GLideN64 translates shaders, and compiles shader programs on the fly. Shaders are large and complex. If the game uses several new combiners, compiling new shaders will take time and result in stuttering. When this option is checked, these shaders are saved so they're not recompiled the next time you run the game.\n[Recommended: Checked]"
#3008# "Internal resolution:"
#3009# "This option sets the output render buffer size. By default, the render buffer is set to the Same as output resolution, but you can set it to the Original N64 resolution or a Multiple of N64 resolution."
#3010# "Same as output resolution"
#3011# "Original N64 resolution (most accurate)"
#3012# "Multiple of N64 resolution:"
#3013# "Gamma"
#3014# "Gamma correction.\nSome N64 games use gamma correction. Gamma correction makes image brighter. N64 applies gamma correction in its Video Interface. \nGLideN64 emulates gamma correction as post-processing effect. That is, it works only when frame buffer emulation enabled. Gamma correction enabled automatically for games, which use it on real N64. You may force gamma correction for all games. Default level of gamma correction is 2, as on N64.\n[Recommended: use defaults]"
#3015# "Custom gamma correction level:"
#3016# "Selecting this option overrides gamma correction specified by the game."
#3017# "2D elements"
#3018# "Render 2D elements in N64 resolution (best quality, can be slow):"
#3019# "When checked, 2D elements are rendered at the N64s resolution before copying them to output. This usually eliminates display issues with 2D elements, but it can be slow. This option uses heuristics to detect adjacent 2D elements that doesn't work for every game.\n[Recommended: Checked, unless you have performance problems]"
#3020# "Disable"
#3021# "Enable optimized"
#3022# "Enable unoptimized"
#3023# "Try to remove colored halos around transparent objects"
#3024# "Fix black lines between 2D elements:"
#3025# "In some games the coordinates for parts of 2D elements are not aligned: there is a half-pixel split between adjacent elements. When rendering at the N64's original resolution it isn't visible, but when the image is scaled up it results in black lines. This option attempts to connect these 2D elements.\nFor adjacent 2D elements: Apply the correction only for polygons that need it. Select this option for games that have issues with black lines.\nAlways: Apply the correction for every 2D element. Select this option when For adjacent 2D elements doesn't help.\nNever: Don't attempt to correct black lines between 2D elements.\n[Recommended: Game dependent, mostly Never]"
#3026# "For adjacent 2D elements"
#3027# "Always"
#3028# "Never"
#3029# "Background rendering mode (HLE only):"
#3030# "Background is a complex macro command used to render large (normally full screen) images. Since background images usually don't fit texture memory, the microcode splits them on narrow strips and renders them one by one. HLE code has two modes to emulate background commands:\nOne piece: The whole background image rendred as one textured rectangle. This method is normally much faster, but the result is not always correct.\nStripped: This method emulates background commands as close as possible to actual microcode implementation. It's slower but more precise. Another problem: some games may have gaps between rendered strips in high resolution. Use &quot;Render 2D elements in N64 resolution&quot; option to remove the gaps.\n[Recommended: Game dependent, mostly Stripped]"
#3031# "One piece"
#3032# "Stripped"
